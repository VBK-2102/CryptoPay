"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/crypto/live-prices/route";
exports.ids = ["app/api/crypto/live-prices/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrypto%2Flive-prices%2Froute&page=%2Fapi%2Fcrypto%2Flive-prices%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrypto%2Flive-prices%2Froute.ts&appDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrypto%2Flive-prices%2Froute&page=%2Fapi%2Fcrypto%2Flive-prices%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrypto%2Flive-prices%2Froute.ts&appDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Admin_Desktop_Zerokost_crypto_payment_gateway_app_api_crypto_live_prices_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/crypto/live-prices/route.ts */ \"(rsc)/./app/api/crypto/live-prices/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/crypto/live-prices/route\",\n        pathname: \"/api/crypto/live-prices\",\n        filename: \"route\",\n        bundlePath: \"app/api/crypto/live-prices/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Zerokost\\\\crypto-payment-gateway\\\\app\\\\api\\\\crypto\\\\live-prices\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Admin_Desktop_Zerokost_crypto_payment_gateway_app_api_crypto_live_prices_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/crypto/live-prices/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjE2X3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGY3J5cHRvJTJGbGl2ZS1wcmljZXMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmNyeXB0byUyRmxpdmUtcHJpY2VzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY3J5cHRvJTJGbGl2ZS1wcmljZXMlMkZyb3V0ZS50cyZhcHBEaXI9QyUzQSU1Q1VzZXJzJTVDQWRtaW4lNUNEZXNrdG9wJTVDWmVyb2tvc3QlNUNjcnlwdG8tcGF5bWVudC1nYXRld2F5JTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNBZG1pbiU1Q0Rlc2t0b3AlNUNaZXJva29zdCU1Q2NyeXB0by1wYXltZW50LWdhdGV3YXkmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ29EO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8/ZDI1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxBZG1pblxcXFxEZXNrdG9wXFxcXFplcm9rb3N0XFxcXGNyeXB0by1wYXltZW50LWdhdGV3YXlcXFxcYXBwXFxcXGFwaVxcXFxjcnlwdG9cXFxcbGl2ZS1wcmljZXNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NyeXB0by9saXZlLXByaWNlcy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NyeXB0by9saXZlLXByaWNlc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY3J5cHRvL2xpdmUtcHJpY2VzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcQWRtaW5cXFxcRGVza3RvcFxcXFxaZXJva29zdFxcXFxjcnlwdG8tcGF5bWVudC1nYXRld2F5XFxcXGFwcFxcXFxhcGlcXFxcY3J5cHRvXFxcXGxpdmUtcHJpY2VzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jcnlwdG8vbGl2ZS1wcmljZXMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrypto%2Flive-prices%2Froute&page=%2Fapi%2Fcrypto%2Flive-prices%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrypto%2Flive-prices%2Froute.ts&appDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/crypto/live-prices/route.ts":
/*!*********************************************!*\
  !*** ./app/api/crypto/live-prices/route.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_binance_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/binance-api */ \"(rsc)/./lib/binance-api.ts\");\n\n\nasync function GET() {\n    try {\n        // Get live prices from Binance or alternative sources (with caching)\n        const prices = await _lib_binance_api__WEBPACK_IMPORTED_MODULE_1__.binanceAPI.getCryptoPrices();\n        // Try to get 24hr stats if using Binance (with proper error handling)\n        let stats = [];\n        const usingBinance = prices.some((p)=>p.source === \"binance\");\n        if (usingBinance) {\n            try {\n                stats = await _lib_binance_api__WEBPACK_IMPORTED_MODULE_1__.binanceAPI.get24hrStats();\n                console.log(\"Successfully fetched 24hr stats:\", stats.length, \"items\");\n            } catch (error) {\n                console.log(\"Could not fetch 24hr stats, using price data only:\", error);\n                stats = [];\n            }\n        }\n        // Merge price data with 24hr statistics if available\n        const enrichedPrices = prices.map((price)=>{\n            const stat = stats.find((s)=>s && s.symbol === price.symbol);\n            return {\n                ...price,\n                change_24h: stat?.priceChangePercent || price.change_24h || 0,\n                volume_24h: stat?.volume || 0,\n                price_change: stat?.priceChange || 0\n            };\n        });\n        const dataSource = prices[0]?.source || \"unknown\";\n        const cacheStatus = _lib_binance_api__WEBPACK_IMPORTED_MODULE_1__.binanceAPI.getCacheStatus();\n        let message = \"\";\n        switch(dataSource){\n            case \"binance\":\n                message = stats.length > 0 ? \"Live data from Binance API with 24hr stats\" : \"Live data from Binance API (24hr stats unavailable)\";\n                break;\n            case \"coingecko\":\n                message = cacheStatus.cached && cacheStatus.age > 60000 ? \"CoinGecko data (rate limited, using cache)\" : \"Live data from CoinGecko API\";\n                break;\n            case \"cached\":\n                message = `Cached data from ${cacheStatus.source} (APIs temporarily unavailable)`;\n                break;\n            case \"fallback\":\n                message = \"Using fallback data (all APIs unavailable)\";\n                break;\n            default:\n                message = \"Data source unknown\";\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: enrichedPrices,\n            source: dataSource,\n            message,\n            timestamp: new Date().toISOString(),\n            statsAvailable: stats.length > 0,\n            cached: cacheStatus.cached,\n            cacheAge: cacheStatus.age\n        });\n    } catch (error) {\n        console.error(\"Error fetching live crypto prices:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Failed to fetch live prices\",\n            details: error instanceof Error ? error.message : \"Unknown error\",\n            source: \"error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2NyeXB0by9saXZlLXByaWNlcy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMEM7QUFDSTtBQUV2QyxlQUFlRTtJQUNwQixJQUFJO1FBQ0YscUVBQXFFO1FBQ3JFLE1BQU1DLFNBQVMsTUFBTUYsd0RBQVVBLENBQUNHLGVBQWU7UUFFL0Msc0VBQXNFO1FBQ3RFLElBQUlDLFFBQWUsRUFBRTtRQUNyQixNQUFNQyxlQUFlSCxPQUFPSSxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLE1BQU0sS0FBSztRQUVuRCxJQUFJSCxjQUFjO1lBQ2hCLElBQUk7Z0JBQ0ZELFFBQVEsTUFBTUosd0RBQVVBLENBQUNTLFlBQVk7Z0JBQ3JDQyxRQUFRQyxHQUFHLENBQUMsb0NBQW9DUCxNQUFNUSxNQUFNLEVBQUU7WUFDaEUsRUFBRSxPQUFPQyxPQUFPO2dCQUNkSCxRQUFRQyxHQUFHLENBQUMsc0RBQXNERTtnQkFDbEVULFFBQVEsRUFBRTtZQUNaO1FBQ0Y7UUFFQSxxREFBcUQ7UUFDckQsTUFBTVUsaUJBQWlCWixPQUFPYSxHQUFHLENBQUNDLENBQUFBO1lBQ2hDLE1BQU1DLE9BQU9iLE1BQU1jLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsS0FBS0EsRUFBRUMsTUFBTSxLQUFLSixNQUFNSSxNQUFNO1lBQzNELE9BQU87Z0JBQ0wsR0FBR0osS0FBSztnQkFDUkssWUFBWUosTUFBTUssc0JBQXNCTixNQUFNSyxVQUFVLElBQUk7Z0JBQzVERSxZQUFZTixNQUFNTyxVQUFVO2dCQUM1QkMsY0FBY1IsTUFBTVMsZUFBZTtZQUNyQztRQUNGO1FBRUEsTUFBTUMsYUFBYXpCLE1BQU0sQ0FBQyxFQUFFLEVBQUVNLFVBQVU7UUFDeEMsTUFBTW9CLGNBQWM1Qix3REFBVUEsQ0FBQzZCLGNBQWM7UUFFN0MsSUFBSUMsVUFBVTtRQUVkLE9BQVFIO1lBQ04sS0FBSztnQkFDSEcsVUFBVTFCLE1BQU1RLE1BQU0sR0FBRyxJQUNyQiwrQ0FDQTtnQkFDSjtZQUNGLEtBQUs7Z0JBQ0hrQixVQUFVRixZQUFZRyxNQUFNLElBQUlILFlBQVlJLEdBQUcsR0FBRyxRQUM5QywrQ0FDQTtnQkFDSjtZQUNGLEtBQUs7Z0JBQ0hGLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRUYsWUFBWXBCLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQztnQkFDakY7WUFDRixLQUFLO2dCQUNIc0IsVUFBVTtnQkFDVjtZQUNGO2dCQUNFQSxVQUFVO1FBQ2Q7UUFFQSxPQUFPL0IscURBQVlBLENBQUNrQyxJQUFJLENBQUM7WUFDdkJDLFNBQVM7WUFDVEMsTUFBTXJCO1lBQ05OLFFBQVFtQjtZQUNSRztZQUNBTSxXQUFXLElBQUlDLE9BQU9DLFdBQVc7WUFDakNDLGdCQUFnQm5DLE1BQU1RLE1BQU0sR0FBRztZQUMvQm1CLFFBQVFILFlBQVlHLE1BQU07WUFDMUJTLFVBQVVaLFlBQVlJLEdBQUc7UUFDM0I7SUFDRixFQUFFLE9BQU9uQixPQUFPO1FBQ2RILFFBQVFHLEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU9kLHFEQUFZQSxDQUFDa0MsSUFBSSxDQUN0QjtZQUNFQyxTQUFTO1lBQ1RyQixPQUFPO1lBQ1A0QixTQUFTNUIsaUJBQWlCNkIsUUFBUTdCLE1BQU1pQixPQUFPLEdBQUc7WUFDbER0QixRQUFRO1FBQ1YsR0FDQTtZQUFFbUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vYXBwL2FwaS9jcnlwdG8vbGl2ZS1wcmljZXMvcm91dGUudHM/OGIwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIlxuaW1wb3J0IHsgYmluYW5jZUFQSSB9IGZyb20gXCJAL2xpYi9iaW5hbmNlLWFwaVwiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQoKSB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGxpdmUgcHJpY2VzIGZyb20gQmluYW5jZSBvciBhbHRlcm5hdGl2ZSBzb3VyY2VzICh3aXRoIGNhY2hpbmcpXG4gICAgY29uc3QgcHJpY2VzID0gYXdhaXQgYmluYW5jZUFQSS5nZXRDcnlwdG9QcmljZXMoKVxuICAgIFxuICAgIC8vIFRyeSB0byBnZXQgMjRociBzdGF0cyBpZiB1c2luZyBCaW5hbmNlICh3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZylcbiAgICBsZXQgc3RhdHM6IGFueVtdID0gW11cbiAgICBjb25zdCB1c2luZ0JpbmFuY2UgPSBwcmljZXMuc29tZShwID0+IHAuc291cmNlID09PSAnYmluYW5jZScpXG4gICAgXG4gICAgaWYgKHVzaW5nQmluYW5jZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RhdHMgPSBhd2FpdCBiaW5hbmNlQVBJLmdldDI0aHJTdGF0cygpXG4gICAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgZmV0Y2hlZCAyNGhyIHN0YXRzOicsIHN0YXRzLmxlbmd0aCwgJ2l0ZW1zJylcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdDb3VsZCBub3QgZmV0Y2ggMjRociBzdGF0cywgdXNpbmcgcHJpY2UgZGF0YSBvbmx5OicsIGVycm9yKVxuICAgICAgICBzdGF0cyA9IFtdXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWVyZ2UgcHJpY2UgZGF0YSB3aXRoIDI0aHIgc3RhdGlzdGljcyBpZiBhdmFpbGFibGVcbiAgICBjb25zdCBlbnJpY2hlZFByaWNlcyA9IHByaWNlcy5tYXAocHJpY2UgPT4ge1xuICAgICAgY29uc3Qgc3RhdCA9IHN0YXRzLmZpbmQocyA9PiBzICYmIHMuc3ltYm9sID09PSBwcmljZS5zeW1ib2wpXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmljZSxcbiAgICAgICAgY2hhbmdlXzI0aDogc3RhdD8ucHJpY2VDaGFuZ2VQZXJjZW50IHx8IHByaWNlLmNoYW5nZV8yNGggfHwgMCxcbiAgICAgICAgdm9sdW1lXzI0aDogc3RhdD8udm9sdW1lIHx8IDAsXG4gICAgICAgIHByaWNlX2NoYW5nZTogc3RhdD8ucHJpY2VDaGFuZ2UgfHwgMFxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBkYXRhU291cmNlID0gcHJpY2VzWzBdPy5zb3VyY2UgfHwgJ3Vua25vd24nXG4gICAgY29uc3QgY2FjaGVTdGF0dXMgPSBiaW5hbmNlQVBJLmdldENhY2hlU3RhdHVzKClcbiAgICBcbiAgICBsZXQgbWVzc2FnZSA9ICcnXG4gICAgXG4gICAgc3dpdGNoIChkYXRhU291cmNlKSB7XG4gICAgICBjYXNlICdiaW5hbmNlJzpcbiAgICAgICAgbWVzc2FnZSA9IHN0YXRzLmxlbmd0aCA+IDAgXG4gICAgICAgICAgPyAnTGl2ZSBkYXRhIGZyb20gQmluYW5jZSBBUEkgd2l0aCAyNGhyIHN0YXRzJ1xuICAgICAgICAgIDogJ0xpdmUgZGF0YSBmcm9tIEJpbmFuY2UgQVBJICgyNGhyIHN0YXRzIHVuYXZhaWxhYmxlKSdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2NvaW5nZWNrbyc6XG4gICAgICAgIG1lc3NhZ2UgPSBjYWNoZVN0YXR1cy5jYWNoZWQgJiYgY2FjaGVTdGF0dXMuYWdlID4gNjAwMDBcbiAgICAgICAgICA/ICdDb2luR2Vja28gZGF0YSAocmF0ZSBsaW1pdGVkLCB1c2luZyBjYWNoZSknXG4gICAgICAgICAgOiAnTGl2ZSBkYXRhIGZyb20gQ29pbkdlY2tvIEFQSSdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2NhY2hlZCc6XG4gICAgICAgIG1lc3NhZ2UgPSBgQ2FjaGVkIGRhdGEgZnJvbSAke2NhY2hlU3RhdHVzLnNvdXJjZX0gKEFQSXMgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUpYFxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnZmFsbGJhY2snOlxuICAgICAgICBtZXNzYWdlID0gJ1VzaW5nIGZhbGxiYWNrIGRhdGEgKGFsbCBBUElzIHVuYXZhaWxhYmxlKSdcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1lc3NhZ2UgPSAnRGF0YSBzb3VyY2UgdW5rbm93bidcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiBlbnJpY2hlZFByaWNlcyxcbiAgICAgIHNvdXJjZTogZGF0YVNvdXJjZSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIHN0YXRzQXZhaWxhYmxlOiBzdGF0cy5sZW5ndGggPiAwLFxuICAgICAgY2FjaGVkOiBjYWNoZVN0YXR1cy5jYWNoZWQsXG4gICAgICBjYWNoZUFnZTogY2FjaGVTdGF0dXMuYWdlXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgbGl2ZSBjcnlwdG8gcHJpY2VzOlwiLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogXCJGYWlsZWQgdG8gZmV0Y2ggbGl2ZSBwcmljZXNcIixcbiAgICAgICAgZGV0YWlsczogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIlVua25vd24gZXJyb3JcIixcbiAgICAgICAgc291cmNlOiAnZXJyb3InXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiYmluYW5jZUFQSSIsIkdFVCIsInByaWNlcyIsImdldENyeXB0b1ByaWNlcyIsInN0YXRzIiwidXNpbmdCaW5hbmNlIiwic29tZSIsInAiLCJzb3VyY2UiLCJnZXQyNGhyU3RhdHMiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwiZXJyb3IiLCJlbnJpY2hlZFByaWNlcyIsIm1hcCIsInByaWNlIiwic3RhdCIsImZpbmQiLCJzIiwic3ltYm9sIiwiY2hhbmdlXzI0aCIsInByaWNlQ2hhbmdlUGVyY2VudCIsInZvbHVtZV8yNGgiLCJ2b2x1bWUiLCJwcmljZV9jaGFuZ2UiLCJwcmljZUNoYW5nZSIsImRhdGFTb3VyY2UiLCJjYWNoZVN0YXR1cyIsImdldENhY2hlU3RhdHVzIiwibWVzc2FnZSIsImNhY2hlZCIsImFnZSIsImpzb24iLCJzdWNjZXNzIiwiZGF0YSIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInN0YXRzQXZhaWxhYmxlIiwiY2FjaGVBZ2UiLCJkZXRhaWxzIiwiRXJyb3IiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/crypto/live-prices/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/binance-api.ts":
/*!****************************!*\
  !*** ./lib/binance-api.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BinanceAPI: () => (/* binding */ BinanceAPI),\n/* harmony export */   binanceAPI: () => (/* binding */ binanceAPI)\n/* harmony export */ });\nclass BinanceAPI {\n    constructor(){\n        this.priceCache = null;\n        this.cacheTimeout = 60000 // 1 minute cache\n        ;\n        this.lastRequestTime = 0;\n        this.minRequestInterval = 2000 // 2 seconds between requests\n        ;\n        this.apiKey = \"a8LF1kb0SfS8pjAmYxyyTbNtyWgAWMYRjXhdiPAb8tLqQQ1BZWMAfUiD9OcK5oGX\";\n        this.secretKey = \"HVMV01xHVhFChX5rudNft4nAEMhYnrnC5Qu2FrXT1wC3EaUBAsgofLTMmwcWnuONi\";\n        this.baseURL = \"https://api.binance.com\";\n    }\n    async createSignature(queryString) {\n        const encoder = new TextEncoder();\n        const keyData = encoder.encode(this.secretKey);\n        const messageData = encoder.encode(queryString);\n        const cryptoKey = await crypto.subtle.importKey(\"raw\", keyData, {\n            name: \"HMAC\",\n            hash: \"SHA-256\"\n        }, false, [\n            \"sign\"\n        ]);\n        const signature = await crypto.subtle.sign(\"HMAC\", cryptoKey, messageData);\n        return Array.from(new Uint8Array(signature)).map((b)=>b.toString(16).padStart(2, \"0\")).join(\"\");\n    }\n    getHeaders(includeAuth = false) {\n        const headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        if (includeAuth) {\n            headers[\"X-MBX-APIKEY\"] = this.apiKey;\n        }\n        return headers;\n    }\n    // Rate limiting helper\n    async waitForRateLimit() {\n        const now = Date.now();\n        const timeSinceLastRequest = now - this.lastRequestTime;\n        if (timeSinceLastRequest < this.minRequestInterval) {\n            const waitTime = this.minRequestInterval - timeSinceLastRequest;\n            console.log(`Rate limiting: waiting ${waitTime}ms`);\n            await new Promise((resolve)=>setTimeout(resolve, waitTime));\n        }\n        this.lastRequestTime = Date.now();\n    }\n    // Check if cached data is still valid\n    isCacheValid() {\n        if (!this.priceCache) return false;\n        const now = Date.now();\n        return now - this.priceCache.timestamp < this.cacheTimeout;\n    }\n    // Get live crypto prices with caching and rate limiting\n    async getCryptoPrices() {\n        // Return cached data if still valid\n        if (this.isCacheValid()) {\n            console.log(\"Returning cached price data\");\n            return this.priceCache.data;\n        }\n        try {\n            // First try Binance\n            const symbols = [\n                \"BTCUSDT\",\n                \"ETHUSDT\",\n                \"USDTUSDT\"\n            ];\n            const response = await fetch(`${this.baseURL}/api/v3/ticker/price`, {\n                headers: this.getHeaders()\n            });\n            if (response.status === 451) {\n                console.log(\"Binance API restricted in this region, using alternative source\");\n                return await this.getAlternativePrices();\n            }\n            if (!response.ok) {\n                throw new Error(`Binance API error: ${response.status}`);\n            }\n            const allPrices = await response.json();\n            // Filter for our supported cryptos and convert to our format\n            const cryptoPrices = symbols.map((symbol)=>{\n                const price = allPrices.find((p)=>p.symbol === symbol);\n                const baseAsset = symbol.replace(\"USDT\", \"\");\n                if (!price) return null;\n                const usdPrice = parseFloat(price.price);\n                const inrPrice = usdPrice * 83.5 // USD to INR conversion\n                ;\n                return {\n                    symbol: baseAsset,\n                    name: this.getCryptoName(baseAsset),\n                    price_usd: usdPrice,\n                    price_inr: inrPrice,\n                    change_24h: 0,\n                    icon: this.getCryptoIcon(baseAsset),\n                    lastUpdated: new Date().toISOString(),\n                    source: \"binance\"\n                };\n            }).filter(Boolean);\n            // Cache the result\n            this.priceCache = {\n                data: cryptoPrices,\n                timestamp: Date.now(),\n                source: \"binance\"\n            };\n            return cryptoPrices;\n        } catch (error) {\n            console.error(\"Error fetching Binance prices:\", error);\n            // Try alternative API\n            return await this.getAlternativePrices();\n        }\n    }\n    // Alternative price source with rate limiting and better error handling\n    async getAlternativePrices() {\n        try {\n            // Apply rate limiting\n            await this.waitForRateLimit();\n            const coinIds = \"bitcoin,ethereum,tether\";\n            const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${coinIds}&vs_currencies=usd,inr&include_24hr_change=true`, {\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"User-Agent\": \"CryptoPaymentGateway/1.0\"\n                }\n            });\n            if (response.status === 429) {\n                console.log(\"CoinGecko API rate limited, using cached or fallback data\");\n                // If we have cached data, return it even if expired\n                if (this.priceCache) {\n                    console.log(\"Returning expired cached data due to rate limit\");\n                    return this.priceCache.data;\n                }\n                // Otherwise use fallback\n                return this.getFallbackPrices();\n            }\n            if (!response.ok) {\n                throw new Error(`CoinGecko API error: ${response.status}`);\n            }\n            const data = await response.json();\n            const cryptoPrices = [\n                {\n                    symbol: \"BTC\",\n                    name: \"Bitcoin\",\n                    price_usd: data.bitcoin?.usd || 42000,\n                    price_inr: data.bitcoin?.inr || 3507000,\n                    change_24h: data.bitcoin?.usd_24h_change || 0,\n                    icon: \"₿\",\n                    lastUpdated: new Date().toISOString(),\n                    source: \"coingecko\"\n                },\n                {\n                    symbol: \"ETH\",\n                    name: \"Ethereum\",\n                    price_usd: data.ethereum?.usd || 3200,\n                    price_inr: data.ethereum?.inr || 267200,\n                    change_24h: data.ethereum?.usd_24h_change || 0,\n                    icon: \"Ξ\",\n                    lastUpdated: new Date().toISOString(),\n                    source: \"coingecko\"\n                },\n                {\n                    symbol: \"USDT\",\n                    name: \"Tether\",\n                    price_usd: data.tether?.usd || 1.0,\n                    price_inr: data.tether?.inr || 83.5,\n                    change_24h: data.tether?.usd_24h_change || 0,\n                    icon: \"₮\",\n                    lastUpdated: new Date().toISOString(),\n                    source: \"coingecko\"\n                }\n            ];\n            // Cache the result\n            this.priceCache = {\n                data: cryptoPrices,\n                timestamp: Date.now(),\n                source: \"coingecko\"\n            };\n            return cryptoPrices;\n        } catch (error) {\n            console.error(\"Error fetching alternative prices:\", error);\n            // If we have cached data, return it even if expired\n            if (this.priceCache) {\n                console.log(\"Returning expired cached data due to API error\");\n                return this.priceCache.data.map((item)=>({\n                        ...item,\n                        source: \"cached\"\n                    }));\n            }\n            // Final fallback to mock data with current timestamp\n            return this.getFallbackPrices();\n        }\n    }\n    // Get 24hr price change statistics with proper error handling\n    async get24hrStats() {\n        try {\n            const symbols = [\n                \"BTCUSDT\",\n                \"ETHUSDT\",\n                \"USDTUSDT\"\n            ];\n            const promises = symbols.map((symbol)=>fetch(`${this.baseURL}/api/v3/ticker/24hr?symbol=${symbol}`, {\n                    headers: this.getHeaders()\n                }).then((response)=>{\n                    if (response.status === 451) {\n                        throw new Error(\"API restricted\");\n                    }\n                    if (!response.ok) {\n                        throw new Error(`HTTP ${response.status}`);\n                    }\n                    return response.json();\n                }).catch((error)=>{\n                    console.log(`Failed to fetch 24hr stats for ${symbol}:`, error.message);\n                    return null;\n                }));\n            const responses = await Promise.all(promises);\n            // Filter out null responses and process valid ones\n            const stats = responses.filter((response)=>response !== null && response.symbol).map((stat)=>({\n                    symbol: stat.symbol.replace(\"USDT\", \"\"),\n                    priceChange: parseFloat(stat.priceChange || \"0\"),\n                    priceChangePercent: parseFloat(stat.priceChangePercent || \"0\"),\n                    lastPrice: parseFloat(stat.lastPrice || \"0\"),\n                    volume: parseFloat(stat.volume || \"0\")\n                }));\n            return stats;\n        } catch (error) {\n            console.error(\"Error fetching 24hr stats:\", error);\n            return [];\n        }\n    }\n    // Get account balances with fallback to mock data\n    async getWalletBalances() {\n        try {\n            const timestamp = Date.now();\n            const queryString = `timestamp=${timestamp}`;\n            const signature = await this.createSignature(queryString);\n            const response = await fetch(`${this.baseURL}/api/v3/account?${queryString}&signature=${signature}`, {\n                headers: this.getHeaders(true)\n            });\n            if (response.status === 451) {\n                console.log(\"Binance API restricted for wallet balances, using mock data\");\n                return this.getMockWalletBalances();\n            }\n            if (!response.ok) {\n                throw new Error(`Binance API error: ${response.status}`);\n            }\n            const accountInfo = await response.json();\n            // Filter and format balances\n            const relevantAssets = [\n                \"BTC\",\n                \"ETH\",\n                \"USDT\",\n                \"USDC\",\n                \"BNB\"\n            ];\n            const balances = {};\n            accountInfo.balances.forEach((balance)=>{\n                if (relevantAssets.includes(balance.asset)) {\n                    const total = parseFloat(balance.free) + parseFloat(balance.locked);\n                    if (total > 0) {\n                        balances[balance.asset] = total;\n                    }\n                }\n            });\n            return balances;\n        } catch (error) {\n            console.error(\"Error fetching wallet balances:\", error);\n            return this.getMockWalletBalances();\n        }\n    }\n    // Mock wallet balances for demo purposes\n    getMockWalletBalances() {\n        return {\n            BTC: 0.15432,\n            ETH: 2.8765,\n            USDT: 1250.50,\n            USDC: 500.00,\n            BNB: 12.345\n        };\n    }\n    // Convert fiat to crypto amount\n    async convertFiatToCrypto(fiatAmount, fiatCurrency, cryptoSymbol) {\n        try {\n            const prices = await this.getCryptoPrices();\n            const crypto1 = prices.find((p)=>p.symbol === cryptoSymbol);\n            if (!crypto1) return 0;\n            let cryptoPrice = 0;\n            if (fiatCurrency === \"USD\") {\n                cryptoPrice = crypto1.price_usd;\n            } else if (fiatCurrency === \"INR\") {\n                cryptoPrice = crypto1.price_inr;\n            } else if (fiatCurrency === \"EUR\") {\n                cryptoPrice = crypto1.price_usd * 0.85;\n            } else if (fiatCurrency === \"GBP\") {\n                cryptoPrice = crypto1.price_usd * 0.75;\n            }\n            return fiatAmount / cryptoPrice;\n        } catch (error) {\n            console.error(\"Error converting fiat to crypto:\", error);\n            return 0;\n        }\n    }\n    // Convert crypto to fiat amount\n    async convertCryptoToFiat(cryptoAmount, cryptoSymbol, fiatCurrency) {\n        try {\n            const prices = await this.getCryptoPrices();\n            const crypto1 = prices.find((p)=>p.symbol === cryptoSymbol);\n            if (!crypto1) return 0;\n            let cryptoPrice = 0;\n            if (fiatCurrency === \"USD\") {\n                cryptoPrice = crypto1.price_usd;\n            } else if (fiatCurrency === \"INR\") {\n                cryptoPrice = crypto1.price_inr;\n            } else if (fiatCurrency === \"EUR\") {\n                cryptoPrice = crypto1.price_usd * 0.85;\n            } else if (fiatCurrency === \"GBP\") {\n                cryptoPrice = crypto1.price_usd * 0.75;\n            }\n            return cryptoAmount * cryptoPrice;\n        } catch (error) {\n            console.error(\"Error converting crypto to fiat:\", error);\n            return 0;\n        }\n    }\n    // Generate crypto address (mock - in production use proper wallet generation)\n    generateCryptoAddress(symbol) {\n        const prefixes = {\n            BTC: \"1\",\n            ETH: \"0x\",\n            USDT: \"0x\",\n            USDC: \"0x\",\n            BNB: \"bnb\"\n        };\n        const prefix = prefixes[symbol] || \"0x\";\n        const randomHex = Math.random().toString(16).substring(2, 34);\n        return prefix + randomHex;\n    }\n    // Simulate on-chain transfer (in production, use proper blockchain integration)\n    async simulateTransfer(fromAddress, toAddress, amount, symbol) {\n        // Simulate network delay\n        await new Promise((resolve)=>setTimeout(resolve, 2000));\n        // Generate transaction hash\n        const txHash = \"0x\" + Math.random().toString(16).substring(2, 66);\n        console.log(`Simulated ${symbol} transfer:`);\n        console.log(`From: ${fromAddress}`);\n        console.log(`To: ${toAddress}`);\n        console.log(`Amount: ${amount} ${symbol}`);\n        console.log(`TX Hash: ${txHash}`);\n        return txHash;\n    }\n    getCryptoName(symbol) {\n        const names = {\n            BTC: \"Bitcoin\",\n            ETH: \"Ethereum\",\n            USDT: \"Tether\",\n            USDC: \"USD Coin\",\n            BNB: \"Binance Coin\"\n        };\n        return names[symbol] || symbol;\n    }\n    getCryptoIcon(symbol) {\n        const icons = {\n            BTC: \"₿\",\n            ETH: \"Ξ\",\n            USDT: \"₮\",\n            USDC: \"$\",\n            BNB: \"B\"\n        };\n        return icons[symbol] || \"₿\";\n    }\n    // Enhanced fallback prices with realistic variations\n    getFallbackPrices() {\n        // Add some realistic price variations\n        const btcBase = 42000;\n        const ethBase = 3200;\n        const usdtBase = 1.0;\n        const variation = ()=>(Math.random() - 0.5) * 0.02 // ±1% variation\n        ;\n        return [\n            {\n                symbol: \"BTC\",\n                name: \"Bitcoin\",\n                price_usd: btcBase * (1 + variation()),\n                price_inr: btcBase * 83.5 * (1 + variation()),\n                change_24h: (Math.random() - 0.5) * 10,\n                icon: \"₿\",\n                lastUpdated: new Date().toISOString(),\n                source: \"fallback\"\n            },\n            {\n                symbol: \"ETH\",\n                name: \"Ethereum\",\n                price_usd: ethBase * (1 + variation()),\n                price_inr: ethBase * 83.5 * (1 + variation()),\n                change_24h: (Math.random() - 0.5) * 8,\n                icon: \"Ξ\",\n                lastUpdated: new Date().toISOString(),\n                source: \"fallback\"\n            },\n            {\n                symbol: \"USDT\",\n                name: \"Tether\",\n                price_usd: usdtBase * (1 + variation() * 0.1),\n                price_inr: usdtBase * 83.5 * (1 + variation() * 0.1),\n                change_24h: (Math.random() - 0.5) * 0.5,\n                icon: \"₮\",\n                lastUpdated: new Date().toISOString(),\n                source: \"fallback\"\n            }\n        ];\n    }\n    // Clear cache manually if needed\n    clearCache() {\n        this.priceCache = null;\n        console.log(\"Price cache cleared\");\n    }\n    // Get cache status\n    getCacheStatus() {\n        if (!this.priceCache) {\n            return {\n                cached: false,\n                age: 0,\n                source: \"none\"\n            };\n        }\n        const age = Date.now() - this.priceCache.timestamp;\n        return {\n            cached: true,\n            age,\n            source: this.priceCache.source\n        };\n    }\n}\nconst binanceAPI = new BinanceAPI();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/binance-api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@14.2.16_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcrypto%2Flive-prices%2Froute&page=%2Fapi%2Fcrypto%2Flive-prices%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcrypto%2Flive-prices%2Froute.ts&appDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CAdmin%5CDesktop%5CZerokost%5Ccrypto-payment-gateway&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();